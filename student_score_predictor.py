# -*- coding: utf-8 -*-
"""student_score_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1isRiyv6qO--NCYslWMO2CDSAt-TF0lIj
"""

from google.colab import drive
drive.mount ('/content/drive')

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

@st.cache_data
def load_data():
    df = pd.read_csv("/content/drive/My Drive/student_scores_500.csv")
    return df

df = load_data()

# Title
st.title("ðŸŽ“ Student Score Predictor using Linear Regression")
st.write("Predict student's exam score based on hours studied.")

# Show data
if st.checkbox("Show Dataset"):
    st.dataframe(df)

# Split data
X = df[['Hours']]
y = df['Scores']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

st.subheader("Model Evaluation Metrics")
st.write(f"Mean Squared Error (MSE): `{mse:.2f}`")
st.write(f"RÂ² Score: `{r2:.2f}`")

# Plotting
st.subheader("ðŸ“ˆ Regression Line Visualization")
fig, ax = plt.subplots()
ax.scatter(df['Hours'], df['Scores'], color='blue', label='Actual Scores')
ax.plot(df['Hours'], model.predict(X), color='red', label='Regression Line')
ax.set_xlabel("Hours Studied")
ax.set_ylabel("Scores")
ax.set_title("Hours vs Scores")
ax.legend()
st.pyplot(fig)

# Predict user input
st.subheader("ðŸ”® Predict Your Score")
hours_input = st.number_input("Enter hours studied:", min_value=0.0, max_value=24.0, step=0.25)

if st.button("Predict"):
    prediction = model.predict([[hours_input]])
    st.success(f"Predicted Score: {prediction[0]:.2f}")

